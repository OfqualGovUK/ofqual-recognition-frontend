@using Ofqual.Recognition.Frontend.Core.Extensions
@using Ofqual.Recognition.Frontend.Web.ViewModels
@using Ofqual.Recognition.Frontend.Core.Helpers
@model QuestionViewModel

@{
    var checkboxGroup = Model?.QuestionContent?.FormGroup?.CheckboxGroup;
    var options = checkboxGroup?.Options;
    var fieldName = checkboxGroup?.Name;

    var hintId = $"{fieldName}-hint";
    var errorId = $"{fieldName}-error";
    var selectedValues = ViewHelpers.GetCheckboxValues(fieldName, Model?.AnswerJson);
    var error = Model?.Validation?.Errors?.FirstOrDefault(e => e.PropertyName == fieldName);
    var hasError = error != null;

    var describedByParts = new List<string>();
    if (!string.IsNullOrWhiteSpace(checkboxGroup?.Hint)) describedByParts.Add(hintId);
    if (hasError) describedByParts.Add(errorId);
    var describedBy = string.Join(" ", describedByParts);
}

@if (options?.Any() == true)
{
    <div class="govuk-form-group @(hasError ? "govuk-form-group--error" : "")">
        <fieldset class="govuk-fieldset" aria-describedby="@describedBy">

            @if (!string.IsNullOrEmpty(checkboxGroup?.Heading?.Text))
            {
                var size = checkboxGroup.Heading.Size;
                var headingTag = size.ToHeadingTag();
                var headingText = checkboxGroup.Heading.Text;
                var legendClass = size.ToGovUkLegendClass();

                <legend class="govuk-fieldset__legend @legendClass">
                    <text>
                        @Html.Raw($"<{headingTag} class=\"govuk-fieldset__heading\">{headingText}</{headingTag}>")
                    </text>
                </legend>
            }

            @if (!string.IsNullOrEmpty(checkboxGroup?.Hint))
            {
                <div id="@hintId" class="govuk-hint">@checkboxGroup.Hint</div>
            }

            @if (hasError)
            {
                <p id="@errorId" class="govuk-error-message">
                    <span class="govuk-visually-hidden">Error:</span> @error!.ErrorMessage
                </p>
            }

            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                @for (int i = 0; i < options.Count; i++)
                {
                    var option = options[i];
                    var optionId = i == 0 ? fieldName : $"{fieldName}-{i}";
                    var hasConditional = (option.ConditionalInputs?.Any() ?? false) || (option.ConditionalSelects?.Any() ?? false);
                    var conditionalId = $"{optionId}-conditional";

                    <div class="govuk-checkboxes__item">
                        <input class="govuk-checkboxes__input"
                               id="@optionId"
                               name="@fieldName"
                               type="checkbox"
                               value="@option.Value"
                               data-aria-controls="@(hasConditional ? conditionalId : null)"
                               @(selectedValues.Contains(option.Value) ? "checked" : "") />

                        <label class="govuk-label govuk-checkboxes__label" for="@optionId">@option.Label</label>
                    </div>

                    @if (hasConditional)
                    {
                        <div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden" id="@conditionalId">
                            @if (option.ConditionalInputs != null)
                            {
                                foreach (var input in option.ConditionalInputs)
                                {
                                    @await Html.PartialAsync("~/Views/Shared/Question/FormGroup/Conditionals/_TextInput.cshtml", new ConditionalTextInputViewModel
                                    {
                                        Input = input,
                                        AnswerJson = Model?.AnswerJson,
                                        Errors = Model?.Validation?.Errors
                                    })
                                }
                            }

                            @if (option.ConditionalSelects != null)
                            {
                                foreach (var select in option.ConditionalSelects)
                                {
                                    @await Html.PartialAsync("~/Views/Shared/Question/FormGroup/Conditionals/_Select.cshtml", new ConditionalSelectViewModel
                                    {
                                        Select = select,
                                        AnswerJson = Model?.AnswerJson,
                                        Errors = Model?.Validation?.Errors
                                    })
                                }
                            }
                        </div>
                    }
                }
            </div>
        </fieldset>
    </div>
}
