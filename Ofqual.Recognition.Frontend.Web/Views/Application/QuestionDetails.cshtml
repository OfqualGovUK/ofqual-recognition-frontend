@using Ofqual.Recognition.Frontend.Web.ViewModels
@using Ofqual.Recognition.Frontend.Core.Constants
@using Ofqual.Recognition.Frontend.Core.Helpers
@using Ofqual.Recognition.Frontend.Core.Enums
@model QuestionViewModel

@{
    var currentTaskNameUrl = QuestionUrlHelper.Parse(Model.CurrentQuestionUrl)!.Value.taskNameUrl;

    var backLinkUrl = Model.FromReview
        ? $"{RouteConstants.ApplicationConstants.APPLICATION_PATH}/{currentTaskNameUrl}/review-your-answers"
        : Model.PreviousQuestionUrl != null
        ? $"../{Model.PreviousQuestionUrl}"
        : Model.FromPreEngagement
        ? RouteConstants.PreEngagementConstants.PRE_ENGAGEMENT_PATH
        : RouteConstants.ApplicationConstants.TASK_LIST_PATH;

    var isReviewPage = Model.QuestionTypeName == QuestionType.Review;
}

@section BackLink {
    <a href="@backLinkUrl" class="govuk-back-link">Back</a>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-@(isReviewPage ? "full-width" : "two-thirds")">
        @await Html.PartialAsync($"~/Views/Shared/Question/Validation/_ErrorSummary.cshtml", Model.Validation)

        @await Html.PartialAsync($"~/Views/Shared/Question/Body/_Body.cshtml", Model.QuestionContent.Body)

        @await Html.PartialAsync($"~/Views/Shared/Question/Review/_ApplicationReview.cshtml", Model)

        @await Html.PartialAsync($"~/Views/Shared/Question/FormGroup/_FormGroup.cshtml", Model)
    </div>

    @await Html.PartialAsync($"~/Views/Shared/Question/Sidebar/_Sidebar.cshtml", Model.QuestionContent.Sidebar)
</div>