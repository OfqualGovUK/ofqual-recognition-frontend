# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
   include:
     - main
     - releases/*

resources:
- repo: self

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  dockerfilePath: '$(System.DefaultWorkingDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  # .NET SDK Version number
  dotnetVersion: '8.0'

stages:

# Test Stage: This stage runs unit tests, integration tests and end-to-end (E2E) tests.
- stage: Test
  displayName: 'Run Unit, Integration and E2E Tests'
  jobs:
    # Unit Test Job: Runs unit tests to validate individual components.
    # E2E Test Job: Runs UI and functional tests to validate user workflows.
    - job: E2E
      displayName: 'Run E2E Tests'
      dependsOn: []
      steps:
        # Step 1: Set up .NET SDK
        - task: UseDotNet@2
          displayName: 'Set Up .NET SDK (Version $(dotnetVersion))'
          inputs:
            packageType: 'sdk'
            version: '$(dotnetVersion).x'
        # Step 2: Restore project dependencies from NuGet
        - task: DotNetCoreCLI@2
          displayName: 'Restore Project Dependencies'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
            verbosityRestore: 'Normal'
        # Step 3: Build the project
        - task: DotNetCoreCLI@2
          displayName: 'Build Project'
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--no-restore'
        # Step 4: Install Playwright browsers
        - script: |
            pwsh Ofqual.Recognition.Frontend.Playwright/bin/Debug/net$(dotnetVersion)/playwright.ps1 install --with-deps
          displayName: 'Install E2E Test Browsers'
        # Step 5: Start the application server
        - script: |
            dotnet run --project Ofqual.Recognition.Frontend.Web/Ofqual.Recognition.Frontend.Web.csproj --urls "$(TestSettings__BaseUrl)" &
            sleep 10
          displayName: 'Start Application Server for E2E Tests'
          env:
            FeatureFlag__Application: '$(FeatureFlag__Application)'
            RecognitionApi__BaseUrl: '$(RecognitionApi__BaseUrl)'
            TestSettings__BaseUrl: '$(TestSettings__BaseUrl)'
            AzureAdB2C__Instance: '$(AzureAdB2C__Instance)'
            AzureAdB2C__ClientId: '$(AzureAdB2C__ClientId)'
            AzureAdB2C__Domain: '$(AzureAdB2C__Domain)'
            AzureAdB2C__SignUpSignInPolicyId: '$(AzureAdB2C__SignUpSignInPolicyId)'
            AzureAdB2C__SignUpSignInPolicyForAutomationId: '$(AzureAdB2C__SignUpSignInPolicyForAutomationId)'
            AzureAdB2C__BaseUriForRedirect: '$(AzureAdB2C__BaseUriForRedirect)'
            AzureAdB2C__UseAutomationPolicies: '$(AzureAdB2C__UseAutomationPolicies)'
            AzureAdB2C__CallBackPath: '$(AzureAdB2C__CallBackPath)'
            AzureAdB2C__AzureAdB2CSignedOutCallbackPath: '$(AzureAdB2C__AzureAdB2CSignedOutCallbackPath)' 
        # Step 6: Run Playwright E2E tests
        - task: DotNetCoreCLI@2
          displayName: 'Run Playwright End-to-End Tests'
          inputs:
            command: 'test'
            projects: 'Ofqual.Recognition.Frontend.Playwright/Ofqual.Recognition.Frontend.Playwright.csproj'
            arguments: '--no-build --no-restore'
          env:
            FeatureFlag__Application: '$(FeatureFlag__Application)'
            RecognitionApi__BaseUrl: '$(RecognitionApi__BaseUrl)'
            TestSettings__BaseUrl: '$(TestSettings__BaseUrl)'
            